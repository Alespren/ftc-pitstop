"use client"

import { useState, useEffect } from "react"
import { Responsive, WidthProvider, Layout } from "react-grid-layout"
import { OPRModule, OPRSmallModule } from "@/components/modules/opr-module"
import { PerformanceModule } from "./modules/performance-module"
import { RankingsModule } from "./modules/rankings-module"
import { AllianceModule } from "./modules/alliance-module"
import { EventOverviewModule } from "./modules/event-overview-module"
import { RankModule, WinRateModule, AverageScoreModule } from "./modules/performance-percentile-module"
import { TeamStats, Ranking, Alliance } from "@/app/dashboard/[eventCode]/[teamNumber]/page"
import { ComparisonData } from "./team-comparison"
import 'react-grid-layout/css/styles.css'
import { Dialog } from "@radix-ui/react-dialog"
import { Cross } from "lucide-react"

interface ModularDashboardPropsimport {
  eventCode: string,
  teamNumber: number,
  ranking: Ranking,
  rankings: Ranking[],
  teamStats: TeamStats,
  alliance: Alliance
}

export function ModularDashboard({ eventCode, teamNumber, ranking, rankings, teamStats, alliance }: ModularDashboardProps) {
  const [data, setData] = useState<ComparisonData | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [searchTerm, setSearchTerm] = useState("")
  const [compareTeam, setCompareTeam] = useState<number | null>(null)
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date())

  const fetchComparison = async () => {
    try {
      setError(null)
      console.log("Fetching team comparison for event:", eventCode)

      const url = teamNumber
        ? `/api/events/${eventCode}/team-comparison?team=${teamNumber}`
        : `/api/events/${eventCode}/team-comparison`

      const response = await fetch(url)
      const result = await response.json()

      if (response.ok) {
        setData(result)
        setLastUpdate(new Date())
        console.log(`Loaded comparison data for ${result.allTeams?.length || 0} teams`)
      } else {
        setError("Unable to load team comparison data")
      }
    } catch (error) {
      console.error("Error fetching comparison:", error)
      setError("Failed to load comparison data")
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchComparison()

    // Refresh every 4 minutes
    const interval = setInterval(fetchComparison, 240000)
    return () => clearInterval(interval)
  }, [eventCode, teamNumber])

  const layout = loadLayout()
  const modules = loadEnabledModules()

  console.log("layout", layout)
  console.log("modules", modules)

  const ResponsiveGridLayout = WidthProvider(Responsive)


  return (
    <ResponsiveGridLayout
      className="layout"
      layouts={{ lg: layout }}
      cols={{ lg: 12 }}
      rowHeight={30}
      isBounded={true}
      containerPadding={[0, 0]}
      onLayoutChange={saveLayout}
    >
      {modules.includes("Performance") && (<div key="Performance">
        <PerformanceModule teamRanking={ranking} teamStats={teamStats} />
      </div>)}
      {modules.includes("Rankings") && (<div key="Rankings">
        <RankingsModule rankings={rankings} teamNumber={teamNumber} />
      </div>)}
      {modules.includes("OPR") && (<div key="OPR">
        <OPRModule eventCode={eventCode} teamNumber={teamNumber} />
      </div>)}
      {modules.includes("Alliance") && (<div key="Alliance">
        <AllianceModule alliance={alliance} teamNumber={teamNumber} />
      </div>)}
      {modules.includes("OPR (Small)") && (<div key="OPR (Small)">
        <OPRSmallModule eventCode={eventCode} teamNumber={teamNumber} />
      </div>)}
      {modules.includes("Event Overview") && (<div key="Event Overview">
        <EventOverviewModule data={data} teamNumber={teamNumber} error={error} loading={loading} />
      </div>)}
      {modules.includes("Rank Percentile") && (<div key="Rank Percentile">
        <RankModule data={data} teamNumber={teamNumber} error={error} loading={loading} />
      </div>)}
      {modules.includes("Win Rate") && (<div key="Win Rate">
        <WinRateModule data={data} teamNumber={teamNumber} error={error} loading={loading} />
      </div>)}
      {modules.includes("Average Score") && (<div key="Average Score">
        <AverageScoreModule data={data} teamNumber={teamNumber} error={error} loading={loading} />
      </div>)}

    </ResponsiveGridLayout >
  );
}

const defaultLayout = [
  { i: "Performance", x: 4, y: 0, w: 4, h: 8 },
  { i: "Rankings", x: 0, y: 0, w: 4, h: 24 },
  { i: "OPR", x: 4, y: 6, w: 8, h: 8 },
  { i: "Alliance", x: 8, y: 6, w: 4, h: 8 },
  { i: "OPR (Small)", x: 4, y: 12, w: 4, h: 8 },
  { i: "Event Overview", x: 8, y: 0, w: 4, h: 8 },
  { i: "Rank Percentile", x: 0, y: 12, w: 4, h: 5 },
  { i: "Win Rate", x: 4, y: 12, w: 4, h: 5 },
  { i: "Average Score", x: 8, y: 12, w: 4, h: 5 }
]

const defaultModules = [ // this is used as the list of all modules
  "Performance",
  "Rankings",
  "OPR",
  "Alliance",
  "OPR (Small)",
  "Event Overview",
  "Rank Percentile",
  "Win Rate",
  "Average Score",
]

const ModuleSelectionModal = (modules: string[]) => {
  <Dialog.Content>
    Test
  </Dialog.Content>
}


const DialogDemo = () => (
  <Dialog.Root>
    <Dialog.Trigger asChild>
      <button className="inline-flex h-[35px] items-center justify-center rounded bg-violet4 px-[15px] font-medium leading-none text-violet11 outline-none outline-offset-1 hover:bg-mauve3 focus-visible:outline-2 focus-visible:outline-violet6 select-none">
        Edit profile
      </button>
    </Dialog.Trigger>
    <Dialog.Portal>
      <Dialog.Overlay className="fixed inset-0 bg-blackA6 data-[state=open]:animate-overlayShow" />
      <Dialog.Content className="fixed left-1/2 top-1/2 max-h-[85vh] w-[90vw] max-w-[500px] -translate-x-1/2 -translate-y-1/2 rounded-md bg-gray1 p-[25px] shadow-[var(--shadow-6)] focus:outline-none data-[state=open]:animate-contentShow">
        <Dialog.Title className="m-0 text-[17px] font-medium text-mauve12">
          Edit profile
        </Dialog.Title>
        <Dialog.Description className="mb-5 mt-2.5 text-[15px] leading-normal text-mauve11">
          Make changes to your profile here. Click save when you're done.
        </Dialog.Description>
        <fieldset className="mb-[15px] flex items-center gap-5">
          <label
            className="w-[90px] text-right text-[15px] text-violet11"
            htmlFor="name"
          >
            Name
          </label>
          <input
            className="inline-flex h-[35px] w-full flex-1 items-center justify-center rounded px-2.5 text-[15px] leading-none text-violet11 shadow-[0_0_0_1px] shadow-violet7 outline-none focus:shadow-[0_0_0_2px] focus:shadow-violet8"
            id="name"
            defaultValue="Pedro Duarte"
          />
        </fieldset>
        <fieldset className="mb-[15px] flex items-center gap-5">
          <label
            className="w-[90px] text-right text-[15px] text-violet11"
            htmlFor="username"
          >
            Username
          </label>
          <input
            className="inline-flex h-[35px] w-full flex-1 items-center justify-center rounded px-2.5 text-[15px] leading-none text-violet11 shadow-[0_0_0_1px] shadow-violet7 outline-none focus:shadow-[0_0_0_2px] focus:shadow-violet8"
            id="username"
            defaultValue="@peduarte"
          />
        </fieldset>
        <div className="mt-[25px] flex justify-end">
          <Dialog.Close asChild>
            <button className="inline-flex h-[35px] items-center justify-center rounded bg-green4 px-[15px] font-medium leading-none text-green11 outline-none outline-offset-1 hover:bg-green5 focus-visible:outline-2 focus-visible:outline-green6 select-none">
              Save changes
            </button>
          </Dialog.Close>
        </div>
        <Dialog.Close asChild>
          <button
            className="absolute right-2.5 top-2.5 inline-flex size-[25px] appearance-none items-center justify-center rounded-full text-violet11 bg-gray3 hover:bg-violet4 focus:shadow-[0_0_0_2px] focus:shadow-violet7 focus:outline-none"
            aria-label="Close"
          >
            <Cross2Icon />
          </button>
        </Dialog.Close>
      </Dialog.Content>
    </Dialog.Portal>
  </Dialog.Root>
);

const saveLayout = (layout: Layout) => {
  setClientSideCookie('layout', JSON.stringify(layout))
}

const loadLayout = () => {
  const cookie = getClientSideCookie('layout')
  if (!cookie) return defaultLayout
  return JSON.parse(cookie)
}

const saveEnabledModules = (modules: string[]) => {
  setClientSideCookie('enabledModules', JSON.stringify(modules))
}

const loadEnabledModules = () => {
  const cookie = getClientSideCookie('enabledModules')
  if (!cookie) return defaultModules
  return JSON.parse(cookie)
}

const getClientSideCookie = (name: string): string | undefined => {
  const cookieValue = document.cookie
    .split('; ')
    .find((row) => row.startsWith(`${name}=`))
    ?.split('=')[1];

  return cookieValue;
};

const setClientSideCookie = (name: string, value: string) => {
  document.cookie = name + "=" + value
}
